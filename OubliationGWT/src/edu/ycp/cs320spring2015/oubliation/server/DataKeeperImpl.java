package edu.ycp.cs320spring2015.oubliation.server;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;

import com.google.gwt.dev.util.collect.HashMap;
import com.google.gwt.user.server.rpc.RemoteServiceServlet;

import edu.ycp.cs320spring2015.oubliation.client.DataKeeper;
import edu.ycp.cs320spring2015.oubliation.client._Dummy;
import edu.ycp.cs320spring2015.oubliation.shared.effect.NoEffect;
import edu.ycp.cs320spring2015.oubliation.shared.effect.Effect;
import edu.ycp.cs320spring2015.oubliation.shared.test.Debug;
import edu.ycp.cs320spring2015.oubliation.shared.transfer.ProfileMemento;

public class DataKeeperImpl extends RemoteServiceServlet implements DataKeeper {
	private static final long serialVersionUID = -7277596399415609046L;
	
	static {
		try {
			Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
		} catch (Exception e) {
			throw new IllegalStateException("Could not load Derby JDBC driver");
		}
	}
	
	private HashMap<String, FakeEntry> fakeDatabase = new HashMap<String, FakeEntry>();

	private static final int MAX_ATTEMPTS = 10;
	
	private interface Transaction<ResultType> {
		public ResultType execute(Connection conn) throws SQLException;
	}
	
	private<ResultType> ResultType executeTransaction(Transaction<ResultType> txn) {
		try {
			return doExecuteTransaction(txn);
		} catch (SQLException e) {
			throw new PersistenceException("Transaction failed", e);
		}
	}
	
	private<ResultType> ResultType doExecuteTransaction(Transaction<ResultType> txn) throws SQLException {
		Connection conn = connect();
		
		try {
			int numAttempts = 0;
			boolean success = false;
			ResultType result = null;
			
			while (!success && numAttempts < MAX_ATTEMPTS) {
				try {
					result = txn.execute(conn);
					conn.commit();
					success = true;
				} catch (SQLException e) {
					if (e.getSQLState() != null && e.getSQLState().equals("41000")) {
						// Deadlock: retry (unless max retry count has been reached)
						numAttempts++;
					} else {
						// Some other kind of SQLException
						throw e;
					}
				}
			}
			
			if (!success) {
				throw new SQLException("Transaction failed (too many retries)");
			}
			
			// Success!
			return result;
		} finally {
			DbUtils.closeQuietly(conn);
		}
	}

	private Connection connect() throws SQLException {
		Connection conn = DriverManager.getConnection("jdbc:derby:res/oubliation.db;create=true");
		
		// Set autocommit to false to allow multiple the execution of
		// multiple queries/statements as part of the same transaction.
		conn.setAutoCommit(false);
		
		return conn;
	}
	
	@Override
	public Boolean createProfile(String username, String password) {
		if (!fakeDatabase.containsKey(username)) {
			ProfileMemento profile = Debug.makeProfileTransfer(username);
			FakeEntry entry = new FakeEntry(password, profile);
			fakeDatabase.put(username, entry);
			
			return true;
		} else {
			return false;
		}
	}
	
	@Override
	public Boolean validateLogin(String username, String password) {
		FakeEntry entry = fakeDatabase.get(username);
		if (entry != null) {
			return password.equals(entry.getPassword());
		} else {
			return false;
		}
	}

	@Override
	public ProfileMemento loadProfile(String username) {
		FakeEntry entry = fakeDatabase.get(username);
		return entry.getSavedata();
	}

	@Override
	public void saveProfile(String username, ProfileMemento profile) {
		FakeEntry oldEntry = fakeDatabase.get(username);
		FakeEntry newEntry = new FakeEntry(oldEntry.getPassword(), profile);
		fakeDatabase.put(username, newEntry);
	}
	
	@Override
	public Map<String, Effect> getEffectMap(String[] effectNames) {
		HashMap<String, Effect> effectMap = new HashMap<String, Effect>();
		for (String name : effectNames) {
			try {
				effectMap.put(name, (Effect) Class.forName(name).getConstructor().newInstance());
			} catch(Exception e) {
				effectMap.put(name, new NoEffect());
			}
		}
		assert(effectMap.size()>0);
		return effectMap;
	}
	
	@Override
	public void createDb() {
		executeTransaction(new Transaction<Void>() {
			@Override
			public Void execute(Connection conn) throws SQLException {
				PreparedStatement createProfileType = null;
				PreparedStatement createAccountsTable = null;
				PreparedStatement createDataTable = null;
				try {
					createProfileType = conn.prepareStatement(
						"create type ProfileMemento external name 'edu.ycp.cs320spring2015.oubliation.shared.transfer.ProfileMemento' language java"
					);
					createProfileType.executeUpdate();
					createAccountsTable = conn.prepareStatement(
						"create table accounts (id integer primary key generated by default as identity, username varchar(15), password varchar(15))"
					);
					createAccountsTable.executeUpdate();
					createDataTable = conn.prepareStatement(
						"create table data (id integer primary key, profile ProfileMemento)"
					);
					createDataTable.executeUpdate();
				} finally {
					DbUtils.closeQuietly(createProfileType);
					DbUtils.closeQuietly(createAccountsTable);
					DbUtils.closeQuietly(createDataTable);
				}
				return null;
			}
		});
	}
	
	@Override
	public _Dummy dummy(_Dummy dummy) {
		return dummy;
	}

}
